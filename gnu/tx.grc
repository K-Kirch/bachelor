options:
  parameters:
    author: kristian
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: tx
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: center_freq
  id: variable
  parameters:
    comment: ''
    value: 438e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 12.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '2000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: variable_constellation_0
  id: variable_constellation
  parameters:
    comment: ''
    const_points: '[-1-1j, -1+1j, 1+1j, 1-1j]'
    dims: '1'
    normalization: digital.constellation.AMPLITUDE_NORMALIZATION
    precision: '8'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: '[0, 1, 3, 2]'
    type: bpsk
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 12.0]
    rotation: 0
    state: true
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: /home/kristian/Desktop/BachelorProject/msg.txt
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'True'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [144, 212.0]
    rotation: 0
    state: enabled
- name: digital_psk_mod_0
  id: digital_psk_mod
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation_points: '2'
    differential: 'True'
    excess_bw: '0.35'
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    mod_code: '"gray"'
    samples_per_symbol: '400'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 212.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom Crypto.Cipher import AES\nfrom Crypto.Random import\
      \ get_random_bytes\n\n\nclass blk(gr.sync_block):  # other base classes are\
      \ basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block example\
      \ - a simple multiply const\"\"\"\n\n    def __init__(self, key = b'', iv =\
      \ b'', mode = AES.MODE_CBC, key_size = 16, block_size = AES.block_size, padding\
      \ = b'\\0', **kwargs):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='AES Encrypt',   # will show up in GRC\n\
      \            in_sig=[np.float32],\n            out_sig=[np.uint8]\n        )\n\
      \        # if an attribute with the same name as a parameter is found,\n   \
      \     # a callback is registered (properties work, too).\n        self.key =\
      \ key\n        self.iv = iv\n        self.mode = mode\n        self.key_size\
      \ = key_size\n        self.block_size = block_size\n        self.padding = padding\n\
      \n    def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        # Generate a random key\n        self.key = get_random_bytes(self.key_size)\n\
      \        \n        # Pad the message\n        p_msg = input_items + b'\\0' *\
      \ (AES.block_size - len(self.key) % AES.block_size)\n\n        # Create a cipher\
      \ object\n        cipher = AES.new(self.key, AES.MODE_CBC)\n\n        # Encrypt\
      \ the message\n        output_items = cipher.encrypt(p_msg)\n        return\
      \ self.key, output_items"
    affinity: ''
    alias: ''
    block_size: '16'
    comment: ''
    iv: b''
    key: b''
    key_size: '16'
    maxoutbuf: '0'
    minoutbuf: '0'
    mode: '2'
    padding: b'\x00'
  states:
    _io_cache: ('AES Encrypt', 'blk', [('key', "b''"), ('iv', "b''"), ('mode', '2'),
      ('key_size', '16'), ('block_size', '16'), ('padding', "b'\\x00'")], [('0', 'float',
      1)], [('0', 'byte', 1)], 'Embedded Python Block example - a simple multiply
      const', ['block_size', 'iv', 'key', 'key_size', 'mode', 'padding'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [392, 204.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom reedsolo import RSCodec\n\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self,\
      \ message = b'', rsc = RSCodec(10)):  # only default arguments here\n      \
      \  \"\"\"arguments to this function show up as parameters in GRC\"\"\"\n   \
      \     gr.sync_block.__init__(\n            self,\n            name='Reed-Solomon\
      \ Encoding',   # will show up in GRC\n            in_sig=[np.uint8],\n     \
      \       out_sig=[np.uint8]\n        )\n        # if an attribute with the same\
      \ name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.message = message\n        self.rsc = rsc\n\n  \
      \  def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        enc_msg = self.rsc.encode(input_items)\n    \
      \    return enc_msg\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    message: ''
    minoutbuf: '0'
    rsc: ''
  states:
    _io_cache: ('Reed-Solomon Encoding', 'blk', [('message', "b''"), ('rsc', '<reedsolo.RSCodec
      object at 0x7f9e271fe440>')], [('0', 'byte', 1)], [('0', 'byte', 1)], 'Embedded
      Python Block example - a simple multiply const', ['message', 'rsc'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 236.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: 100e3
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: center_freq
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 364.0]
    rotation: 0
    state: enabled
- name: soapy_hackrf_sink_1
  id: soapy_hackrf_sink
  parameters:
    affinity: ''
    alias: ''
    amp: 'False'
    bandwidth: '0'
    center_freq: center_freq
    comment: ''
    dev_args: ''
    samp_rate: samp_rate
    type: fc32
    vga: '16'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 248.0]
    rotation: 0
    state: enabled

connections:
- [blocks_file_source_0, '0', epy_block_0, '0']
- [digital_psk_mod_0, '0', qtgui_freq_sink_x_0, '0']
- [digital_psk_mod_0, '0', soapy_hackrf_sink_1, '0']
- [epy_block_0, '0', epy_block_1, '0']
- [epy_block_1, '0', digital_psk_mod_0, '0']

metadata:
  file_format: 1
